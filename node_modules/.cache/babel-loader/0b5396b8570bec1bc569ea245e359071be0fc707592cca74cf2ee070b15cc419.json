{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\Desktop\\\\react-weather-chart\\\\src\\\\components\\\\WeatherChart.jsx\";\nimport React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\nconst WeatherChart = ({\n  weatherData\n}) => {\n  const labels = weatherData.map(day => new Date(day.current.dt * 1000).toLocaleDateString());\n  const temperatures = weatherData.map(day => day.current.temp);\n  const data = {\n    labels,\n    datasets: [{\n      label: \"Temperature (°C)\",\n      data: temperatures,\n      borderColor: \"rgba(75,192,192,1)\",\n      fill: false\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(Line, {\n    data: data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 10\n  }, this);\n};\n_c = WeatherChart;\nexport default WeatherChart;\nvar _c;\n$RefreshReg$(_c, \"WeatherChart\");","map":{"version":3,"names":["React","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Tooltip","Legend","jsxDEV","_jsxDEV","register","WeatherChart","weatherData","labels","map","day","Date","current","dt","toLocaleDateString","temperatures","temp","data","datasets","label","borderColor","fill","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/DELL/OneDrive/Desktop/react-weather-chart/src/components/WeatherChart.jsx"],"sourcesContent":["import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Tooltip,\n  Legend\n);\n\nconst WeatherChart = ({ weatherData }) => {\n  const labels = weatherData.map((day) =>\n    new Date(day.current.dt * 1000).toLocaleDateString()\n  );\n  const temperatures = weatherData.map((day) => day.current.temp);\n\n  const data = {\n    labels,\n    datasets: [\n      {\n        label: \"Temperature (°C)\",\n        data: temperatures,\n        borderColor: \"rgba(75,192,192,1)\",\n        fill: false,\n      },\n    ],\n  };\n\n  return <Line data={data} />;\n};\n\nexport default WeatherChart;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SACEC,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,OAAO,EACPC,MAAM,QACD,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElBR,OAAO,CAACS,QAAQ,CACdR,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,OAAO,EACPC,MACF,CAAC;AAED,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EACxC,MAAMC,MAAM,GAAGD,WAAW,CAACE,GAAG,CAAEC,GAAG,IACjC,IAAIC,IAAI,CAACD,GAAG,CAACE,OAAO,CAACC,EAAE,GAAG,IAAI,CAAC,CAACC,kBAAkB,CAAC,CACrD,CAAC;EACD,MAAMC,YAAY,GAAGR,WAAW,CAACE,GAAG,CAAEC,GAAG,IAAKA,GAAG,CAACE,OAAO,CAACI,IAAI,CAAC;EAE/D,MAAMC,IAAI,GAAG;IACXT,MAAM;IACNU,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,kBAAkB;MACzBF,IAAI,EAAEF,YAAY;MAClBK,WAAW,EAAE,oBAAoB;MACjCC,IAAI,EAAE;IACR,CAAC;EAEL,CAAC;EAED,oBAAOjB,OAAA,CAACV,IAAI;IAACuB,IAAI,EAAEA;EAAK;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC7B,CAAC;AAACC,EAAA,GAnBIpB,YAAY;AAqBlB,eAAeA,YAAY;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}